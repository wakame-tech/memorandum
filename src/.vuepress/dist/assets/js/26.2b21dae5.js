(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{417:function(a,e,t){"use strict";t.r(e);var v=t(1),_=Object(v.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"バイトの疲れが溜まってきた"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#バイトの疲れが溜まってきた"}},[a._v("#")]),a._v(" バイトの疲れが溜まってきた")]),a._v(" "),t("p",[a._v("３日目です。バイトがつらいけど８月末で退職するのであと十数回行けば完全なる自由が手に入ると思うと頑張れる。\nところで、先日金欠ながらAmazonで"),t("a",{attrs:{href:"https://www.amazon.co.jp/gp/product/B071ZXQG7M/ref=oh_aui_detailpage_o00_s00?ie=UTF8&psc=1",target:"_blank",rel:"noopener noreferrer"}},[a._v("タブレットアーム"),t("OutboundLink")],1),a._v("をポチりました。ベッドに取り付けたら人間をダメにする機械の完成です。これでYoutubeとかアニメ鑑賞とかするのが最高すぎる。\n2000円で人生が変わる(悪い方向に)のでおすすめのアイテムです。")]),a._v(" "),t("h1",{attrs:{id:"閑話休題"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#閑話休題"}},[a._v("#")]),a._v(" 閑話休題")]),a._v(" "),t("p",[a._v("コミットログを見ながらいままで何をしてきたのか振り返りたいと思います。")]),a._v(" "),t("h2",{attrs:{id:"_7-16-1日目"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-16-1日目"}},[a._v("#")]),a._v(" 7/16(1日目)")]),a._v(" "),t("p",[a._v("この日から "),t("code",[a._v("Arcturus(注: 自作言語プロジェクトの名前)")]),a._v(" の開発が始まっています。この日は確か大学が補講日で休日にも関わらず、レポート提出ついでにテスト勉強しに大学に赴いた日です。テスト勉強しろ。")]),a._v(" "),t("p",[a._v("言語を解析するにあたって大体は大まかに分けて次のステップを踏む必要があります。(インタプリタの場合)")]),a._v(" "),t("h3",{attrs:{id:"プログラム実行までの主な流れ"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#プログラム実行までの主な流れ"}},[a._v("#")]),a._v(" プログラム実行までの主な流れ")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("[字句解析] → [構文解析] → [意味解析] → [実行]\n")])])]),t("p",[a._v("字句解析はソースコードを対応するトークンに置き換える作業です。これは正規表現で出来ます。\n構文解析は字句解析で生成されたトークン列を構文の構造に落とし込みます。\nこれが難しそう、そんな時に見つけたのが "),t("code",[a._v("Ruby")]),a._v(" の標準添付ライブラリ "),t("code",[a._v("racc")]),a._v(" です。\n"),t("code",[a._v("racc")]),a._v(" は "),t("code",[a._v("Ruby")]),a._v(" 版 "),t("code",[a._v("yacc")]),a._v(" で、 "),t("code",[a._v("yacc")]),a._v(" はパーサジェネレータの１つです。ここでは"),t("code",[a._v("racc")]),a._v("の使い方などは割愛しますが "),t("code",[a._v("yacc")]),a._v(" によって構文解析を容易に行うことが出来ました。この日は簡単な四則演算の字句解析器と構文解析器を実装して終わり。")]),a._v(" "),t("h1",{attrs:{id:"_7-17-2日目"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-17-2日目"}},[a._v("#")]),a._v(" 7/17(2日目)")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("commit 803dacd4ec204535c16b0a02cb57b78d02552eb3 '関数呼び出し複数引数時のカンマにめちゃ苦戦したけどゴリ押しでなんとかなった'\n")])])]),t("p",[a._v("この日は "),t("code",[a._v("f(1, 2, 3, 4)")]),a._v(" みたいなプログラムをパースしようと苦戦していたみたいです。結果ゴリ押しで")]),a._v(" "),t("h3",{attrs:{id:"parser-y"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parser-y"}},[a._v("#")]),a._v(" parser.y")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("# 関数呼び出し\n    parameters: \n         PAREN_OPEN exp PAREN_CLOSE { result = [val[1]] }\n         | PAREN_OPEN exp COMMA exp PAREN_CLOSE { result = [val[1], val[3]] }\n         | PAREN_OPEN exp COMMA exp COMMA exp PAREN_CLOSE { result = [val[1], val[3], val[5]] }\n         | PAREN_OPEN exp COMMA exp COMMA exp COMMA exp PAREN_CLOSE { result = [val[1], val[3], val[5], val[7]] }\n         | PAREN_OPEN exp COMMA exp COMMA exp COMMA exp COMMA exp PAREN_CLOSE { result = [val[1], val[3], val[5], val[7], val[9]] }\n         | PAREN_OPEN exp COMMA exp COMMA exp COMMA exp COMMA exp COMMA exp PAREN_CLOSE { result = [val[1], val[3], val[5], val[7], val[9], val[11]] }\n")])])]),t("p",[a._v("6引数までをべた書きにすることで対応したようです。(後日改良してます)")]),a._v(" "),t("p",[a._v("ていうかテスト勉強して。。")]),a._v(" "),t("h1",{attrs:{id:"_7-18-3日目"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-18-3日目"}},[a._v("#")]),a._v(" 7/18(3日目)")]),a._v(" "),t("p",[a._v("この日は変数定義や関数定義の実装に取り組んでいたようです。\nこの頃はまだ構文解析器と意味解析器が分離されておらず、"),t("code",[a._v("racc")]),a._v(" の "),t("code",[a._v("y")]),a._v(" ファイルの中に直接変数が宣言されたときの処理とかを書いていたようです。")]),a._v(" "),t("p",[a._v("変数は名前空間のシンボルをキーとするハッシュで管理されていて、各キーに対応する値は変数名のシンボルをキーとするハッシュです。\n例えば、")]),a._v(" "),t("h3",{attrs:{id:"decl-ac"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#decl-ac"}},[a._v("#")]),a._v(" decl.ac")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("a: Int\n")])])]),t("p",[a._v("のような形で宣言された時に "),t("code",[a._v("global")]),a._v(" 空間での "),t("code",[a._v("a")]),a._v(" の宣言なので、 "),t("code",[a._v("var_table[:global][:a]")]),a._v(" に変数の情報(型など)が格納されます。\nこうすることによって関数の引数の変数名がグローバルで宣言されている変数名と被って使えないなどということが回避できます。\n最初に思いついたのがこれだけどもっといい方法があるかも・・・。")]),a._v(" "),t("p",[a._v("次に関数、関数は単純に関数名をキーとするハッシュで管理されていてキーに対応する値は関数の情報(各引数の型、返り値型、関数の実装)が格納されます。")]),a._v(" "),t("h3",{attrs:{id:"fn-ac"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#fn-ac"}},[a._v("#")]),a._v(" fn.ac")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("fn f(a: Int) -> Int {\n    a + 1\n}\n")])])]),t("p",[a._v("この時点では関数の戻り値は最後に評価された値を返すようにしています。ただまだ宣言された返り値型と実際の返り値の型が一致するかを検査していなかったりいろいろ荒削りです。")]),a._v(" "),t("p",[a._v("本日も時間が来てしまったので続きは明日となります。では、")])])}),[],!1,null,null,null);e.default=_.exports}}]);